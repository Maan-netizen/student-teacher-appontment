<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student-Teacher Appointment System</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .modal {
            transition: opacity 0.3s ease-in-out;
        }
        .modal.hidden {
            opacity: 0;
            pointer-events: none;
        }
    </style>
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { 
            getAuth, 
            signInAnonymously, 
            signInWithCustomToken, 
            createUserWithEmailAndPassword, 
            signInWithEmailAndPassword, 
            signOut,
            onAuthStateChanged
        } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { 
            getFirestore, 
            doc, 
            setDoc, 
            getDoc, 
            collection, 
            addDoc, 
            query, 
            where, 
            onSnapshot
        } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // IMPORTANT: For local development, replace the placeholder below with your actual Firebase project config.
        // You can find this in your Firebase Console -> Project Settings -> Your apps -> Firebase SDK snippet
        const localFirebaseConfig = {

          apiKey: "AIzaSyC9jQ3sNAlRf4ihySXN3_YRgDZy_AXcN4E",
          authDomain: "student-teacher-89c98.firebaseapp.com",
          projectId: "student-teacher-89c98",
          storageBucket: "student-teacher-89c98.firebasestorage.app",
          messagingSenderId: "89895966265",
          appId: "1:89895966265:web:b1012da686b0369dfb5fe8",
          measurementId: "G-KVJVN597GM"
};

   
        // This aapiKey: "AIzaSyC9jQ3sNAlRf4ihySXN3_YRgDZy_AXcN4E"
         //allows the code to work both in the Gemini environment and locally.
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : localFirebaseConfig;
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        let db, auth;
        let userId;

        // UI elements
        const authContainer = document.getElementById('auth-container');
        const appContainer = document.getElementById('app-container');
        const emailInput = document.getElementById('email');
        const passwordInput = document.getElementById('password');
        const loginBtn = document.getElementById('login-btn');
        const signupBtn = document.getElementById('signup-btn');
        const logoutBtn = document.getElementById('logout-btn');
        const roleSelect = document.getElementById('role-select');
        const userIdDisplay = document.getElementById('user-id-display');
        const messageDisplay = document.getElementById('message-display');

        const studentView = document.getElementById('student-view');
        const teacherView = document.getElementById('teacher-view');
        const teacherList = document.getElementById('teacher-list');
        const appointmentList = document.getElementById('appointment-list');
        const acceptAppointmentModal = document.getElementById('accept-appointment-modal');
        const closeModalBtn = document.getElementById('close-modal');
        const confirmAcceptBtn = document.getElementById('confirm-accept-btn');
        const rejectAppointmentModal = document.getElementById('reject-appointment-modal');
        const closeRejectModalBtn = document.getElementById('close-reject-modal');
        const confirmRejectBtn = document.getElementById('confirm-reject-btn');
        let currentAppointmentId;

        // Simple message display function
        const showMessage = (message, isError = false) => {
            messageDisplay.textContent = message;
            messageDisplay.classList.remove('hidden', 'bg-red-500', 'bg-green-500');
            if (isError) {
                messageDisplay.classList.add('bg-red-500');
            } else {
                messageDisplay.classList.add('bg-green-500');
            }
            setTimeout(() => {
                messageDisplay.classList.add('hidden');
            }, 3000);
        };

        // Firebase Initialization and Authentication
        const setupFirebase = async () => {
            try {
                const app = initializeApp(firebaseConfig);
                db = getFirestore(app);
                auth = getAuth(app);

                // Sign in with the provided custom token or anonymously
                if (initialAuthToken) {
                    await signInWithCustomToken(auth, initialAuthToken);
                } else {
                    await signInAnonymously(auth);
                }

                // Listen for auth state changes
                onAuthStateChanged(auth, async (user) => {
                    if (user) {
                        userId = user.uid;
                        userIdDisplay.textContent = `User ID: ${userId}`;
                        authContainer.classList.add('hidden');
                        appContainer.classList.remove('hidden');
                        checkUserRole(user.uid);
                    } else {
                        authContainer.classList.remove('hidden');
                        appContainer.classList.add('hidden');
                    }
                });

            } catch (error) {
                console.error("Error setting up Firebase:", error);
                showMessage("Firebase setup failed. Check console for details.", true);
            }
        };

        // Check user role and display appropriate view
        const checkUserRole = async (uid) => {
            const userDocRef = doc(db, 'artifacts', appId, 'users', uid);
            const userDoc = await getDoc(userDocRef);
            if (userDoc.exists()) {
                const userData = userDoc.data();
                if (userData.role === 'teacher') {
                    studentView.classList.add('hidden');
                    teacherView.classList.remove('hidden');
                    listenToTeacherAppointments(uid);
                } else {
                    teacherView.classList.add('hidden');
                    studentView.classList.remove('hidden');
                    listenToTeachers();
                }
            } else {
                // Default to student view for new users until they save a role.
                teacherView.classList.add('hidden');
                studentView.classList.remove('hidden');
                listenToTeachers();
            }
        };

        // Listen for real-time updates to the list of teachers
        const listenToTeachers = () => {
            const q = query(collection(db, 'artifacts', appId, 'users'), where('role', '==', 'teacher'));
            onSnapshot(q, (querySnapshot) => {
                teacherList.innerHTML = '';
                querySnapshot.forEach((doc) => {
                    const teacher = doc.data();
                    const teacherUid = doc.id;
                    const li = document.createElement('li');
                    li.className = 'flex items-center justify-between p-4 bg-gray-50 rounded-lg shadow-sm mb-2';
                    li.innerHTML = `
                        <span class="font-semibold text-gray-700">${teacher.email}</span>
                        <button onclick="bookAppointment('${teacherUid}')" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors">Book</button>
                    `;
                    teacherList.appendChild(li);
                });
            });
        };

        // Book an appointment as a student
        window.bookAppointment = async (teacherUid) => {
            if (!userId) {
                console.error("User not authenticated.");
                return;
            }
            try {
                await addDoc(collection(db, 'artifacts', appId, 'appointments'), {
                    studentId: userId,
                    teacherId: teacherUid,
                    status: 'pending',
                });
                showMessage('Appointment request sent!');
            } catch (error) {
                console.error("Error booking appointment: ", error);
            }
        };

        // Listen for real-time updates to a teacher's appointments
        const listenToTeacherAppointments = (teacherUid) => {
            const q = query(collection(db, 'artifacts', appId, 'appointments'), where('teacherId', '==', teacherUid));
            onSnapshot(q, async (querySnapshot) => {
                appointmentList.innerHTML = '';
                const studentEmails = new Map();
                for (const docSnapshot of querySnapshot.docs) {
                    const appointment = docSnapshot.data();
                    let studentEmail = studentEmails.get(appointment.studentId);
                    if (!studentEmail) {
                        const studentDocRef = doc(db, 'artifacts', appId, 'users', appointment.studentId);
                        const studentDoc = await getDoc(studentDocRef);
                        studentEmail = studentDoc.exists() ? studentDoc.data().email : 'Unknown Student';
                        studentEmails.set(appointment.studentId, studentEmail);
                    }

                    const li = document.createElement('li');
                    li.className = 'flex items-center justify-between p-4 bg-gray-50 rounded-lg shadow-sm mb-2';
                    li.innerHTML = `
                        <div>
                            <span class="font-semibold text-gray-700">Student: ${studentEmail}</span>
                            <span class="block text-sm text-gray-500">Status: ${appointment.status}</span>
                        </div>
                    `;
                    if (appointment.status === 'pending') {
                        li.innerHTML += `
                            <div class="flex space-x-2">
                                <button onclick="openModal('accept', '${docSnapshot.id}')" class="px-3 py-1 bg-green-500 text-white text-sm rounded-md hover:bg-green-600 transition-colors">Accept</button>
                                <button onclick="openModal('reject', '${docSnapshot.id}')" class="px-3 py-1 bg-red-500 text-white text-sm rounded-md hover:bg-red-600 transition-colors">Reject</button>
                            </div>
                        `;
                    }
                    appointmentList.appendChild(li);
                }
            });
        };

        // Modal functions
        window.openModal = (type, appointmentId) => {
            currentAppointmentId = appointmentId;
            if (type === 'accept') {
                acceptAppointmentModal.classList.remove('hidden');
            } else if (type === 'reject') {
                rejectAppointmentModal.classList.remove('hidden');
            }
        };

        window.closeModals = () => {
            acceptAppointmentModal.classList.add('hidden');
            rejectAppointmentModal.classList.add('hidden');
        };

        window.handleAccept = async () => {
            try {
                const appointmentDocRef = doc(db, 'artifacts', appId, 'appointments', currentAppointmentId);
                await setDoc(appointmentDocRef, { status: 'accepted' }, { merge: true });
                closeModals();
            } catch (error) {
                console.error("Error accepting appointment:", error);
            }
        };

        window.handleReject = async () => {
            try {
                const appointmentDocRef = doc(db, 'artifacts', appId, 'appointments', currentAppointmentId);
                await setDoc(appointmentDocRef, { status: 'rejected' }, { merge: true });
                closeModals();
            } catch (error) {
                console.error("Error rejecting appointment:", error);
            }
        };
        
        // Event Listeners for Authentication
        loginBtn.addEventListener('click', async () => {
            const email = emailInput.value;
            const password = passwordInput.value;
            try {
                await signInWithEmailAndPassword(auth, email, password);
                showMessage("Login successful!", false);
            } catch (error) {
                console.error("Login failed:", error);
                showMessage(`Login failed: ${error.message}`, true);
            }
        });

        signupBtn.addEventListener('click', async () => {
            const email = emailInput.value;
            const password = passwordInput.value;
            const role = roleSelect.value;
            try {
                const userCredential = await createUserWithEmailAndPassword(auth, email, password);
                const user = userCredential.user;
                const userDocRef = doc(db, 'artifacts', appId, 'users', user.uid);
                await setDoc(userDocRef, {
                    email: user.email,
                    role: role,
                });
                showMessage("Signup successful!", false);
            } catch (error) {
                console.error("Sign up failed:", error);
                showMessage(`Sign up failed: ${error.message}`, true);
            }
        });

        logoutBtn.addEventListener('click', async () => {
            try {
                await signOut(auth);
                showMessage("Logged out successfully.", false);
            } catch (error) {
                console.error("Logout failed:", error);
                showMessage("Logout failed. Check console for details.", true);
            }
        });

        // Modal event listeners
        closeModalBtn.addEventListener('click', closeModals);
        closeRejectModalBtn.addEventListener('click', closeModals);
        confirmAcceptBtn.addEventListener('click', window.handleAccept);
        confirmRejectBtn.addEventListener('click', window.handleReject);

        // Start the application
        window.onload = setupFirebase;
    </script>
</head>
<body class="bg-gray-100 min-h-screen flex items-center justify-center font-sans p-4">

    <!-- Authentication Container -->
    <div id="auth-container" class="w-full max-w-md bg-white p-8 rounded-xl shadow-lg transition-all duration-300">
        <h2 class="text-3xl font-bold text-center mb-6 text-gray-800">Welcome</h2>
        <div class="space-y-4">
            <input type="email" id="email" placeholder="Email" class="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors">
            <input type="password" id="password" placeholder="Password" class="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors">
            <select id="role-select" class="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors">
                <option value="student">Student</option>
                <option value="teacher">Teacher</option>
            </select>
        </div>
        <div class="mt-6 flex flex-col space-y-3">
            <button id="login-btn" class="w-full p-3 bg-blue-600 text-white font-bold rounded-lg hover:bg-blue-700 transition-colors shadow-lg transform hover:scale-105">Login</button>
            <button id="signup-btn" class="w-full p-3 bg-indigo-600 text-white font-bold rounded-lg hover:bg-indigo-700 transition-colors shadow-lg transform hover:scale-105">Sign Up</button>
        </div>
    </div>

    <!-- Main Application Container -->
    <div id="app-container" class="w-full max-w-2xl bg-white p-8 rounded-xl shadow-lg hidden">
        <header class="flex justify-between items-center mb-6 pb-4 border-b border-gray-200">
            <h1 class="text-3xl font-bold text-gray-800">Appointment System</h1>
            <div class="flex items-center space-x-4">
                <span id="user-id-display" class="text-sm text-gray-500"></span>
                <button id="logout-btn" class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors transform hover:scale-105">Logout</button>
            </div>
        </header>

        <!-- Message Display -->
        <div id="message-display" class="hidden bg-green-500 text-white p-3 rounded-lg mb-4 text-center"></div>

        <!-- Student View -->
        <div id="student-view" class="space-y-6">
            <h2 class="text-2xl font-semibold text-gray-700">Available Teachers</h2>
            <ul id="teacher-list" class="space-y-4">
                <!-- Teacher list will be populated here by JavaScript -->
            </ul>
        </div>

        <!-- Teacher View -->
        <div id="teacher-view" class="space-y-6 hidden">
            <h2 class="text-2xl font-semibold text-gray-700">My Appointments</h2>
            <ul id="appointment-list" class="space-y-4">
                <!-- Appointment list will be populated here by JavaScript -->
            </ul>
        </div>

        <!-- Accept Appointment Modal -->
        <div id="accept-appointment-modal" class="modal fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 hidden">
            <div class="bg-white p-6 rounded-lg shadow-xl w-full max-w-sm text-center">
                <h3 class="text-xl font-bold mb-4">Accept Appointment?</h3>
                <p class="mb-6 text-gray-600">Are you sure you want to accept this appointment?</p>
                <div class="flex justify-center space-x-4">
                    <button id="confirm-accept-btn" class="px-6 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition-colors">Yes</button>
                    <button id="close-modal" class="px-6 py-2 bg-gray-300 text-gray-800 rounded-md hover:bg-gray-400 transition-colors">Cancel</button>
                </div>
            </div>
        </div>

        <!-- Reject Appointment Modal -->
        <div id="reject-appointment-modal" class="modal fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 hidden">
            <div class="bg-white p-6 rounded-lg shadow-xl w-full max-w-sm text-center">
                <h3 class="text-xl font-bold mb-4">Reject Appointment?</h3>
                <p class="mb-6 text-gray-600">Are you sure you want to reject this appointment?</p>
                <div class="flex justify-center space-x-4">
                    <button id="confirm-reject-btn" class="px-6 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition-colors">Yes</button>
                    <button id="close-reject-modal" class="px-6 py-2 bg-gray-300 text-gray-800 rounded-md hover:bg-gray-400 transition-colors">Cancel</button>
                </div>
            </div>
        </div>
    </div>

</body>
</html>
